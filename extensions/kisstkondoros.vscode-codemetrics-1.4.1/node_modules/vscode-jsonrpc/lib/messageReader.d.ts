import { ChildProcess } from 'child_process';
import { Message } from './messages';
import { Event } from './events';
export interface DataCallback {
    (data: Message): void;
}
export interface MessageReader {
    onError: Event<Error>;
    onClose: Event<void>;
    listen(callback: DataCallback): void;
}
export declare abstract class AbstractMessageReader {
    private errorEmitter;
    private closeEmitter;
    constructor();
    onError: Event<Error>;
    protected fireError(error: any): void;
    onClose: Event<void>;
    protected fireClose(): void;
    private asError(error);
}
export declare class StreamMessageReader extends AbstractMessageReader implements MessageReader {
    private readable;
    private callback;
    private buffer;
    private nextMessageLength;
    constructor(readable: NodeJS.ReadableStream, encoding?: string);
    listen(callback: DataCallback): void;
    private onData(data);
}
export declare class IPCMessageReader extends AbstractMessageReader implements MessageReader {
    private process;
    constructor(process: NodeJS.Process | ChildProcess);
    listen(callback: DataCallback): void;
}
